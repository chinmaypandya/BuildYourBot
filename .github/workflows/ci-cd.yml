name: BYB CI/CD Pipeline

on:
  push:
    branches:
      - beta
  pull_request:
    branches:
      - beta

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Docker Buildx (multi-platform builds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub (optional, if you want to push images to Docker Hub)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build Docker images for the services
    - name: Build ai service
      id: build_ai
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/buildyourbot-ai-service ./ai
      continue-on-error: true

    - name: Build web service
      id: build_web
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/buildyourbot-web-service ./web
      continue-on-error: true

    - name: Build chat service
      id: build_chat
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/buildyourbot-chat-service ./chat
      continue-on-error: true

    - name: Build dbconn service
      id: build_dbconn
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/buildyourbot-dbconn-service ./dbconn
      continue-on-error: true
    
    - name: Build redis service
      id: build_redis
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/buildyourbot-redis-service ./redis
      continue-on-error: true

    # Step 5: Run services with Docker Compose
    - name: Run services with Docker Compose
      run: |
        docker compose up --detach --remove-orphans
      continue-on-error: true

    # Step 6: Health check for services
    - name: Health check for web service
      id: health_web
      if: steps.build_web.outcome == 'success'
      run: |
        # Function to check health of a service with retries
        check_health() {
          local url=$1
          local max_attempts=5
          local attempt=1
          local wait_time=2  # Initial wait time in seconds

          echo "Starting health check for $url..."

          while [[ $attempt -le $max_attempts ]]; do
            echo "Attempting to check health at $url (Attempt $attempt)..."
            
            # Make the curl request
            response=$(curl -S -w "%{http_code}" -o response.txt "$url")

            # Check if curl was successful
            if [[ $? -ne 0 ]]; then
              echo "Error making request to $url. Curl exit status: $?"
              exit 1  # Fail the job if curl command fails
            fi
            
            response_body=$(<response.txt)  # Read the response body from the file

            # Check the response code
            if [[ "$response" -eq 200 ]]; then
              echo "$url is healthy, returned status code: $response"
              echo "Response Body: $response_body"
              return 0  # Success
            else
              echo "$url returned status code: $response"
              echo "Response Body: $response_body"
              if [[ $attempt -lt $max_attempts ]]; then
                echo "Retrying in $wait_time seconds..."
                sleep $wait_time  # Wait before retrying
                wait_time=$((wait_time * 2))  # Exponential backoff
              fi
            fi

            ((attempt++))  # Increment the attempt counter
          done

          echo "$url did not start successfully after $max_attempts attempts."
          exit 1  # Fail the job if not 200 after retries
        }

        # Health check for the Web service
        check_health "http://localhost:3001"
      continue-on-error: true

    - name: Health check for AI service
      id: health_ai
      if: steps.build_ai.outcome == 'success'
      run: |
        # Function to check health of a service with retries
        check_health() {
          local url=$1
          local max_attempts=5
          local attempt=1
          local wait_time=2  # Initial wait time in seconds

          echo "Starting health check for $url..."

          while [[ $attempt -le $max_attempts ]]; do
            echo "Attempting to check health at $url (Attempt $attempt)..."
            
            # Make the curl request
            response=$(curl -S -w "%{http_code}" -o response.txt "$url")
            local curl_exit_status=$?

            # Check if curl was successful
            if [[ $? -ne 0 ]]; then
              echo "Error making request to $url. Curl exit status: $curl_exit_status"
              # Continue to next attempt even if curl fails
            fi
            
            response_body=$(<response.txt)  # Read the response body from the file

            # Check the response code
            if [[ "$response" -eq 200 ]]; then
              echo "$url is healthy, returned status code: $response"
              echo "Response Body: $response_body"
              return 0  # Success
            else
              echo "$url returned status code: $response"
              echo "Response Body: $response_body"
              if [[ $attempt -lt $max_attempts ]]; then
                echo "Retrying in $wait_time seconds..."
                sleep $wait_time  # Wait before retrying
                wait_time=$((wait_time * 2))  # Exponential backoff
              fi
            fi

            ((attempt++))  # Increment the attempt counter
          done

          echo "$url did not start successfully after $max_attempts attempts."
          exit 1  # Fail the job if not 200 after retries
        }

        # Health check for the AI service
        check_health "http://localhost:8000/v1/chat/health"
      continue-on-error: true

    # Step 7: Show running containers and logs (optional)
    - name: Show running containers and logs
      if: always() # This will ensure logs are fetched even if the previous step fails
      run: |
        docker ps                                  # List all running containers
        docker compose logs --tail=1000             # Fetch the last 1000 lines of logs for each service

    # Step 8: Shut down services after testing
    - name: Shut down services
      if: always()
      run: docker compose down
    
    # Step 9: Push Docker images to Docker Hub after passing tests
    - name: Push ai service
      if: steps.build_ai.outcome == 'success' && steps.health_ai.outcome == 'success'  # Push only if build and health check succeeded
      run: docker push ${{ secrets.DOCKER_USERNAME }}/buildyourbot-ai-service

    - name: Push web service
      if: steps.build_web.outcome == 'success' && steps.health_web.outcome == 'success'  # Push only if build and health check succeeded
      run: docker push ${{ secrets.DOCKER_USERNAME }}/buildyourbot-web-service
