name: BYB CI/CD Pipeline

on:
  push:
    branches:
      - beta
  pull_request:
    branches:
      - beta

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Docker Buildx (multi-platform builds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub (optional, if you want to push images to Docker Hub)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build Docker images for the services
    - name: Build api service
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/buildyourbot/api-service ./server

    - name: Build web service
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/buildyourbot/web-service ./client

    - name: Build chat service
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/buildyourbot/chat-service ./chat

    - name: Build db service
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/buildyourbot/db-service ./db

    # Step 5: Run services with Docker Compose
    - name: Run services with Docker Compose
      run: |
        docker compose up --force-recreate --detach --remove-orphans --no-deps

    # Step 6: Health check (optional, can add tests here)
    - name: Test services
      run: |
        # Perform the health check for the web service
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
        if [[ "$response" -ne 200 ]]; then
          echo "Web service returned status code: $response"
        exit 1  # Fail the job if not 200
        fi

        # Perform the health check for the API service
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3004/v1/chat/health)
        if [[ "$response" -ne 200 ]]; then
          echo "API service returned status code: $response"
          exit 1  # Fail the job if not 200
        fi
      continue-on-error: true  # Proceed even if this step fails

    # Step 7: Show running containers and logs (optional)
    - name: Show running containers and logs
      if: always() # This will ensure logs are fetched even if the previous step fails
      run: |
        docker ps                                  # List all running containers
        docker compose logs --tail=100             # Fetch the last 100 lines of logs for each service

    # Step 8: Shut down services after testing
    - name: Shut down services
      if: always()
      run: docker compose down
